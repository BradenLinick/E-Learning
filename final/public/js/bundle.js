/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./resources/js/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/split.js/split.js":
/*!****************************************!*\
  !*** ./node_modules/split.js/split.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*! Split.js - v1.5.7 */\n\n(function (global, factory) {\n     true ? module.exports = factory() :\n    undefined;\n}(this, (function () { 'use strict';\n\n    // The programming goals of Split.js are to deliver readable, understandable and\n    // maintainable code, while at the same time manually optimizing for tiny minified file size,\n    // browser compatibility without additional requirements, graceful fallback (IE8 is supported)\n    // and very few assumptions about the user's page layout.\n    var global = window;\n    var document = global.document;\n\n    // Save a couple long function names that are used frequently.\n    // This optimization saves around 400 bytes.\n    var addEventListener = 'addEventListener';\n    var removeEventListener = 'removeEventListener';\n    var getBoundingClientRect = 'getBoundingClientRect';\n    var gutterStartDragging = '_a';\n    var aGutterSize = '_b';\n    var bGutterSize = '_c';\n    var HORIZONTAL = 'horizontal';\n    var NOOP = function () { return false; };\n\n    // Figure out if we're in IE8 or not. IE8 will still render correctly,\n    // but will be static instead of draggable.\n    var isIE8 = global.attachEvent && !global[addEventListener];\n\n    // Helper function determines which prefixes of CSS calc we need.\n    // We only need to do this once on startup, when this anonymous function is called.\n    //\n    // Tests -webkit, -moz and -o prefixes. Modified from StackOverflow:\n    // http://stackoverflow.com/questions/16625140/js-feature-detection-to-detect-the-usage-of-webkit-calc-over-calc/16625167#16625167\n    var calc = (['', '-webkit-', '-moz-', '-o-'].filter(function (prefix) {\n        var el = document.createElement('div');\n        el.style.cssText = \"width:\" + prefix + \"calc(9px)\";\n\n        return (!!el.style.length)\n    }).shift()) + \"calc\";\n\n    // Helper function checks if its argument is a string-like type\n    var isString = function (v) { return (typeof v === 'string' || v instanceof String); };\n\n    // Helper function allows elements and string selectors to be used\n    // interchangeably. In either case an element is returned. This allows us to\n    // do `Split([elem1, elem2])` as well as `Split(['#id1', '#id2'])`.\n    var elementOrSelector = function (el) {\n        if (isString(el)) {\n            var ele = document.querySelector(el);\n            if (!ele) {\n                throw new Error((\"Selector \" + el + \" did not match a DOM element\"))\n            }\n            return ele\n        }\n\n        return el\n    };\n\n    // Helper function gets a property from the properties object, with a default fallback\n    var getOption = function (options, propName, def) {\n        var value = options[propName];\n        if (value !== undefined) {\n            return value\n        }\n        return def\n    };\n\n    var getGutterSize = function (gutterSize, isFirst, isLast, gutterAlign) {\n        if (isFirst) {\n            if (gutterAlign === 'end') {\n                return 0\n            } else if (gutterAlign === 'center') {\n                return gutterSize / 2\n            }\n        } else if (isLast) {\n            if (gutterAlign === 'start') {\n                return 0\n            } else if (gutterAlign === 'center') {\n                return gutterSize / 2\n            }\n        }\n\n        return gutterSize\n    };\n\n    // Default options\n    var defaultGutterFn = function (i, gutterDirection) {\n        var gut = document.createElement('div');\n        gut.className = \"gutter gutter-\" + gutterDirection;\n        return gut\n    };\n\n    var defaultElementStyleFn = function (dim, size, gutSize) {\n        var style = {};\n\n        if (!isString(size)) {\n            if (!isIE8) {\n                style[dim] = calc + \"(\" + size + \"% - \" + gutSize + \"px)\";\n            } else {\n                style[dim] = size + \"%\";\n            }\n        } else {\n            style[dim] = size;\n        }\n\n        return style\n    };\n\n    var defaultGutterStyleFn = function (dim, gutSize) {\n        var obj;\n\n        return (( obj = {}, obj[dim] = (gutSize + \"px\"), obj ));\n    };\n\n    // The main function to initialize a split. Split.js thinks about each pair\n    // of elements as an independant pair. Dragging the gutter between two elements\n    // only changes the dimensions of elements in that pair. This is key to understanding\n    // how the following functions operate, since each function is bound to a pair.\n    //\n    // A pair object is shaped like this:\n    //\n    // {\n    //     a: DOM element,\n    //     b: DOM element,\n    //     aMin: Number,\n    //     bMin: Number,\n    //     dragging: Boolean,\n    //     parent: DOM element,\n    //     direction: 'horizontal' | 'vertical'\n    // }\n    //\n    // The basic sequence:\n    //\n    // 1. Set defaults to something sane. `options` doesn't have to be passed at all.\n    // 2. Initialize a bunch of strings based on the direction we're splitting.\n    //    A lot of the behavior in the rest of the library is paramatized down to\n    //    rely on CSS strings and classes.\n    // 3. Define the dragging helper functions, and a few helpers to go with them.\n    // 4. Loop through the elements while pairing them off. Every pair gets an\n    //    `pair` object and a gutter.\n    // 5. Actually size the pair elements, insert gutters and attach event listeners.\n    var Split = function (idsOption, options) {\n        if ( options === void 0 ) options = {};\n\n        var ids = idsOption;\n        var dimension;\n        var clientAxis;\n        var position;\n        var positionEnd;\n        var clientSize;\n        var elements;\n\n        // Allow HTMLCollection to be used as an argument when supported\n        if (Array.from) {\n            ids = Array.from(ids);\n        }\n\n        // All DOM elements in the split should have a common parent. We can grab\n        // the first elements parent and hope users read the docs because the\n        // behavior will be whacky otherwise.\n        var firstElement = elementOrSelector(ids[0]);\n        var parent = firstElement.parentNode;\n        var parentFlexDirection = getComputedStyle ? getComputedStyle(parent).flexDirection : null;\n\n        // Set default options.sizes to equal percentages of the parent element.\n        var sizes = getOption(options, 'sizes') || ids.map(function () { return 100 / ids.length; });\n\n        // Standardize minSize to an array if it isn't already. This allows minSize\n        // to be passed as a number.\n        var minSize = getOption(options, 'minSize', 100);\n        var minSizes = Array.isArray(minSize) ? minSize : ids.map(function () { return minSize; });\n\n        // Get other options\n        var expandToMin = getOption(options, 'expandToMin', false);\n        var gutterSize = getOption(options, 'gutterSize', 10);\n        var gutterAlign = getOption(options, 'gutterAlign', 'center');\n        var snapOffset = getOption(options, 'snapOffset', 30);\n        var dragInterval = getOption(options, 'dragInterval', 1);\n        var direction = getOption(options, 'direction', HORIZONTAL);\n        var cursor = getOption(options, 'cursor', direction === HORIZONTAL ? 'col-resize' : 'row-resize');\n        var gutter = getOption(options, 'gutter', defaultGutterFn);\n        var elementStyle = getOption(options, 'elementStyle', defaultElementStyleFn);\n        var gutterStyle = getOption(options, 'gutterStyle', defaultGutterStyleFn);\n\n        // 2. Initialize a bunch of strings based on the direction we're splitting.\n        // A lot of the behavior in the rest of the library is paramatized down to\n        // rely on CSS strings and classes.\n        if (direction === HORIZONTAL) {\n            dimension = 'width';\n            clientAxis = 'clientX';\n            position = 'left';\n            positionEnd = 'right';\n            clientSize = 'clientWidth';\n        } else if (direction === 'vertical') {\n            dimension = 'height';\n            clientAxis = 'clientY';\n            position = 'top';\n            positionEnd = 'bottom';\n            clientSize = 'clientHeight';\n        }\n\n        // 3. Define the dragging helper functions, and a few helpers to go with them.\n        // Each helper is bound to a pair object that contains its metadata. This\n        // also makes it easy to store references to listeners that that will be\n        // added and removed.\n        //\n        // Even though there are no other functions contained in them, aliasing\n        // this to self saves 50 bytes or so since it's used so frequently.\n        //\n        // The pair object saves metadata like dragging state, position and\n        // event listener references.\n\n        function setElementSize (el, size, gutSize, i) {\n            // Split.js allows setting sizes via numbers (ideally), or if you must,\n            // by string, like '300px'. This is less than ideal, because it breaks\n            // the fluid layout that `calc(% - px)` provides. You're on your own if you do that,\n            // make sure you calculate the gutter size by hand.\n            var style = elementStyle(dimension, size, gutSize, i);\n\n            // eslint-disable-next-line no-param-reassign\n            Object.keys(style).forEach(function (prop) {\n                el.style[prop] = style[prop];\n            });\n        }\n\n        function setGutterSize (gutterElement, gutSize, i) {\n            var style = gutterStyle(dimension, gutSize, i);\n\n            // eslint-disable-next-line no-param-reassign\n            Object.keys(style).forEach(function (prop) {\n                gutterElement.style[prop] = style[prop];\n            });\n        }\n\n        function getSizes () {\n            return elements.map(function (element) { return element.size; })\n        }\n\n        // Supports touch events, but not multitouch, so only the first\n        // finger `touches[0]` is counted.\n        function getMousePosition (e) {\n            if ('touches' in e) { return e.touches[0][clientAxis] }\n            return e[clientAxis]\n        }\n\n        // Actually adjust the size of elements `a` and `b` to `offset` while dragging.\n        // calc is used to allow calc(percentage + gutterpx) on the whole split instance,\n        // which allows the viewport to be resized without additional logic.\n        // Element a's size is the same as offset. b's size is total size - a size.\n        // Both sizes are calculated from the initial parent percentage,\n        // then the gutter size is subtracted.\n        function adjust (offset) {\n            var a = elements[this.a];\n            var b = elements[this.b];\n            var percentage = a.size + b.size;\n\n            a.size = (offset / this.size) * percentage;\n            b.size = (percentage - ((offset / this.size) * percentage));\n\n            setElementSize(a.element, a.size, this[aGutterSize], a.i);\n            setElementSize(b.element, b.size, this[bGutterSize], b.i);\n        }\n\n        // drag, where all the magic happens. The logic is really quite simple:\n        //\n        // 1. Ignore if the pair is not dragging.\n        // 2. Get the offset of the event.\n        // 3. Snap offset to min if within snappable range (within min + snapOffset).\n        // 4. Actually adjust each element in the pair to offset.\n        //\n        // ---------------------------------------------------------------------\n        // |    | <- a.minSize               ||              b.minSize -> |    |\n        // |    |  | <- this.snapOffset      ||     this.snapOffset -> |  |    |\n        // |    |  |                         ||                        |  |    |\n        // |    |  |                         ||                        |  |    |\n        // ---------------------------------------------------------------------\n        // | <- this.start                                        this.size -> |\n        function drag (e) {\n            var offset;\n            var a = elements[this.a];\n            var b = elements[this.b];\n\n            if (!this.dragging) { return }\n\n            // Get the offset of the event from the first side of the\n            // pair `this.start`. Then offset by the initial position of the\n            // mouse compared to the gutter size.\n            offset = (getMousePosition(e) - this.start) + (this[aGutterSize] - this.dragOffset);\n\n            if (dragInterval > 1) {\n                offset = Math.round(offset / dragInterval) * dragInterval;\n            }\n\n            // If within snapOffset of min or max, set offset to min or max.\n            // snapOffset buffers a.minSize and b.minSize, so logic is opposite for both.\n            // Include the appropriate gutter sizes to prevent overflows.\n            if (offset <= a.minSize + snapOffset + this[aGutterSize]) {\n                offset = a.minSize + this[aGutterSize];\n            } else if (offset >= this.size - (b.minSize + snapOffset + this[bGutterSize])) {\n                offset = this.size - (b.minSize + this[bGutterSize]);\n            }\n\n            // Actually adjust the size.\n            adjust.call(this, offset);\n\n            // Call the drag callback continously. Don't do anything too intensive\n            // in this callback.\n            getOption(options, 'onDrag', NOOP)();\n        }\n\n        // Cache some important sizes when drag starts, so we don't have to do that\n        // continously:\n        //\n        // `size`: The total size of the pair. First + second + first gutter + second gutter.\n        // `start`: The leading side of the first element.\n        //\n        // ------------------------------------------------\n        // |      aGutterSize -> |||                      |\n        // |                     |||                      |\n        // |                     |||                      |\n        // |                     ||| <- bGutterSize       |\n        // ------------------------------------------------\n        // | <- start                             size -> |\n        function calculateSizes () {\n            // Figure out the parent size minus padding.\n            var a = elements[this.a].element;\n            var b = elements[this.b].element;\n\n            var aBounds = a[getBoundingClientRect]();\n            var bBounds = b[getBoundingClientRect]();\n\n            this.size = aBounds[dimension] + bBounds[dimension] + this[aGutterSize] + this[bGutterSize];\n            this.start = aBounds[position];\n            this.end = aBounds[positionEnd];\n        }\n\n        function innerSize (element) {\n            // Return nothing if getComputedStyle is not supported (< IE9)\n            if (!getComputedStyle) { return null }\n\n            var computedStyle = getComputedStyle(element);\n            var size = element[clientSize];\n\n            if (direction === HORIZONTAL) {\n                size -= parseFloat(computedStyle.paddingLeft) + parseFloat(computedStyle.paddingRight);\n            } else {\n                size -= parseFloat(computedStyle.paddingTop) + parseFloat(computedStyle.paddingBottom);\n            }\n\n            return size\n        }\n\n        // When specifying percentage sizes that are less than the computed\n        // size of the element minus the gutter, the lesser percentages must be increased\n        // (and decreased from the other elements) to make space for the pixels\n        // subtracted by the gutters.\n        function trimToMin (sizesToTrim) {\n            // Try to get inner size of parent element.\n            // If it's no supported, return original sizes.\n            var parentSize = innerSize(parent);\n            if (parentSize === null) {\n                return sizesToTrim\n            }\n\n            // Keep track of the excess pixels, the amount of pixels over the desired percentage\n            // Also keep track of the elements with pixels to spare, to decrease after if needed\n            var excessPixels = 0;\n            var toSpare = [];\n\n            var pixelSizes = sizesToTrim.map(function (size, i) {\n                // Convert requested percentages to pixel sizes\n                var pixelSize = (parentSize * size) / 100;\n                var elementGutterSize = getGutterSize(\n                    gutterSize,\n                    i === 0,\n                    i === sizesToTrim.length - 1,\n                    gutterAlign\n                );\n                var elementMinSize = minSizes[i] + elementGutterSize;\n\n                // If element is too smal, increase excess pixels by the difference\n                // and mark that it has no pixels to spare\n                if (pixelSize < elementMinSize) {\n                    excessPixels += (elementMinSize - pixelSize);\n                    toSpare.push(0);\n                    return elementMinSize\n                }\n\n                // Otherwise, mark the pixels it has to spare and return it's original size\n                toSpare.push(pixelSize - elementMinSize);\n                return pixelSize\n            });\n\n            // If nothing was adjusted, return the original sizes\n            if (excessPixels === 0) {\n                return sizesToTrim\n            }\n\n            return pixelSizes.map(function (pixelSize, i) {\n                var newPixelSize = pixelSize;\n\n                // While there's still pixels to take, and there's enough pixels to spare,\n                // take as many as possible up to the total excess pixels\n                if ((excessPixels > 0) && (toSpare[i] - excessPixels) > 0) {\n                    var takenPixels = Math.min(excessPixels, (toSpare[i] - excessPixels));\n\n                    // Subtract the amount taken for the next iteration\n                    excessPixels -= takenPixels;\n                    newPixelSize = pixelSize - takenPixels;\n                }\n\n                // Return the pixel size adjusted as a percentage\n                return (newPixelSize / parentSize) * 100\n            })\n        }\n\n        // stopDragging is very similar to startDragging in reverse.\n        function stopDragging () {\n            var self = this;\n            var a = elements[self.a].element;\n            var b = elements[self.b].element;\n\n            if (self.dragging) {\n                getOption(options, 'onDragEnd', NOOP)(getSizes());\n            }\n\n            self.dragging = false;\n\n            // Remove the stored event listeners. This is why we store them.\n            global[removeEventListener]('mouseup', self.stop);\n            global[removeEventListener]('touchend', self.stop);\n            global[removeEventListener]('touchcancel', self.stop);\n            global[removeEventListener]('mousemove', self.move);\n            global[removeEventListener]('touchmove', self.move);\n\n            // Clear bound function references\n            self.stop = null;\n            self.move = null;\n\n            a[removeEventListener]('selectstart', NOOP);\n            a[removeEventListener]('dragstart', NOOP);\n            b[removeEventListener]('selectstart', NOOP);\n            b[removeEventListener]('dragstart', NOOP);\n\n            a.style.userSelect = '';\n            a.style.webkitUserSelect = '';\n            a.style.MozUserSelect = '';\n            a.style.pointerEvents = '';\n\n            b.style.userSelect = '';\n            b.style.webkitUserSelect = '';\n            b.style.MozUserSelect = '';\n            b.style.pointerEvents = '';\n\n            self.gutter.style.cursor = '';\n            self.parent.style.cursor = '';\n            document.body.style.cursor = '';\n        }\n\n        // startDragging calls `calculateSizes` to store the inital size in the pair object.\n        // It also adds event listeners for mouse/touch events,\n        // and prevents selection while dragging so avoid the selecting text.\n        function startDragging (e) {\n            // Right-clicking can't start dragging.\n            if ('button' in e && e.button !== 0) {\n                return\n            }\n\n            // Alias frequently used variables to save space. 200 bytes.\n            var self = this;\n            var a = elements[self.a].element;\n            var b = elements[self.b].element;\n\n            // Call the onDragStart callback.\n            if (!self.dragging) {\n                getOption(options, 'onDragStart', NOOP)(getSizes());\n            }\n\n            // Don't actually drag the element. We emulate that in the drag function.\n            e.preventDefault();\n\n            // Set the dragging property of the pair object.\n            self.dragging = true;\n\n            // Create two event listeners bound to the same pair object and store\n            // them in the pair object.\n            self.move = drag.bind(self);\n            self.stop = stopDragging.bind(self);\n\n            // All the binding. `window` gets the stop events in case we drag out of the elements.\n            global[addEventListener]('mouseup', self.stop);\n            global[addEventListener]('touchend', self.stop);\n            global[addEventListener]('touchcancel', self.stop);\n            global[addEventListener]('mousemove', self.move);\n            global[addEventListener]('touchmove', self.move);\n\n            // Disable selection. Disable!\n            a[addEventListener]('selectstart', NOOP);\n            a[addEventListener]('dragstart', NOOP);\n            b[addEventListener]('selectstart', NOOP);\n            b[addEventListener]('dragstart', NOOP);\n\n            a.style.userSelect = 'none';\n            a.style.webkitUserSelect = 'none';\n            a.style.MozUserSelect = 'none';\n            a.style.pointerEvents = 'none';\n\n            b.style.userSelect = 'none';\n            b.style.webkitUserSelect = 'none';\n            b.style.MozUserSelect = 'none';\n            b.style.pointerEvents = 'none';\n\n            // Set the cursor at multiple levels\n            self.gutter.style.cursor = cursor;\n            self.parent.style.cursor = cursor;\n            document.body.style.cursor = cursor;\n\n            // Cache the initial sizes of the pair.\n            calculateSizes.call(self);\n\n            // Determine the position of the mouse compared to the gutter\n            self.dragOffset = getMousePosition(e) - self.end;\n        }\n\n        // adjust sizes to ensure percentage is within min size and gutter.\n        sizes = trimToMin(sizes);\n\n        // 5. Create pair and element objects. Each pair has an index reference to\n        // elements `a` and `b` of the pair (first and second elements).\n        // Loop through the elements while pairing them off. Every pair gets a\n        // `pair` object and a gutter.\n        //\n        // Basic logic:\n        //\n        // - Starting with the second element `i > 0`, create `pair` objects with\n        //   `a = i - 1` and `b = i`\n        // - Set gutter sizes based on the _pair_ being first/last. The first and last\n        //   pair have gutterSize / 2, since they only have one half gutter, and not two.\n        // - Create gutter elements and add event listeners.\n        // - Set the size of the elements, minus the gutter sizes.\n        //\n        // -----------------------------------------------------------------------\n        // |     i=0     |         i=1         |        i=2       |      i=3     |\n        // |             |                     |                  |              |\n        // |           pair 0                pair 1             pair 2           |\n        // |             |                     |                  |              |\n        // -----------------------------------------------------------------------\n        var pairs = [];\n        elements = ids.map(function (id, i) {\n            // Create the element object.\n            var element = {\n                element: elementOrSelector(id),\n                size: sizes[i],\n                minSize: minSizes[i],\n                i: i,\n            };\n\n            var pair;\n\n            if (i > 0) {\n                // Create the pair object with its metadata.\n                pair = {\n                    a: i - 1,\n                    b: i,\n                    dragging: false,\n                    direction: direction,\n                    parent: parent,\n                };\n\n                pair[aGutterSize] = getGutterSize(gutterSize, i - 1 === 0, false, gutterAlign);\n                pair[bGutterSize] = getGutterSize(gutterSize, false, i === ids.length - 1, gutterAlign);\n\n                // if the parent has a reverse flex-direction, switch the pair elements.\n                if (parentFlexDirection === 'row-reverse' || parentFlexDirection === 'column-reverse') {\n                    var temp = pair.a;\n                    pair.a = pair.b;\n                    pair.b = temp;\n                }\n            }\n\n            // Determine the size of the current element. IE8 is supported by\n            // staticly assigning sizes without draggable gutters. Assigns a string\n            // to `size`.\n            //\n            // IE9 and above\n            if (!isIE8) {\n                // Create gutter elements for each pair.\n                if (i > 0) {\n                    var gutterElement = gutter(i, direction, element.element);\n                    setGutterSize(gutterElement, gutterSize, i);\n\n                    // Save bound event listener for removal later\n                    pair[gutterStartDragging] = startDragging.bind(pair);\n\n                    // Attach bound event listener\n                    gutterElement[addEventListener]('mousedown', pair[gutterStartDragging]);\n                    gutterElement[addEventListener]('touchstart', pair[gutterStartDragging]);\n\n                    parent.insertBefore(gutterElement, element.element);\n\n                    pair.gutter = gutterElement;\n                }\n            }\n\n            setElementSize(\n                element.element,\n                element.size,\n                getGutterSize(gutterSize, i === 0, i === ids.length - 1, gutterAlign)\n            );\n\n            // After the first iteration, and we have a pair object, append it to the\n            // list of pairs.\n            if (i > 0) {\n                pairs.push(pair);\n            }\n\n            return element\n        });\n\n        function adjustToMin (element) {\n            var isLast = (element.i === pairs.length);\n            var pair = isLast ? pairs[element.i - 1] : pairs[element.i];\n\n            calculateSizes.call(pair);\n\n            var size = isLast ? (pair.size - element.minSize - pair[bGutterSize]) : element.minSize + pair[aGutterSize];\n\n            adjust.call(pair, size);\n        }\n\n        elements.forEach(function (element) {\n            var computedSize = element.element[getBoundingClientRect]()[dimension];\n\n            if (computedSize < element.minSize) {\n                if (expandToMin) {\n                    adjustToMin(element);\n                } else {\n                    element.minSize = computedSize;\n                }\n            }\n        });\n\n        function setSizes (newSizes) {\n            var trimmed = trimToMin(newSizes);\n            trimmed.forEach(function (newSize, i) {\n                if (i > 0) {\n                    var pair = pairs[i - 1];\n\n                    var a = elements[pair.a];\n                    var b = elements[pair.b];\n\n                    a.size = trimmed[i - 1];\n                    b.size = newSize;\n\n                    setElementSize(a.element, a.size, pair[aGutterSize]);\n                    setElementSize(b.element, b.size, pair[bGutterSize]);\n                }\n            });\n        }\n\n        function destroy (preserveStyles, preserveGutter) {\n            pairs.forEach(function (pair) {\n                if (preserveGutter !== true) {\n                    pair.parent.removeChild(pair.gutter);\n                } else {\n                    pair.gutter[removeEventListener]('mousedown', pair[gutterStartDragging]);\n                    pair.gutter[removeEventListener]('touchstart', pair[gutterStartDragging]);\n                }\n\n                if (preserveStyles !== true) {\n                    var style = elementStyle(dimension, pair.a.size, pair[aGutterSize]);\n\n                    Object.keys(style).forEach(function (prop) {\n                        elements[pair.a].element.style[prop] = '';\n                        elements[pair.b].element.style[prop] = '';\n                    });\n                }\n            });\n        }\n\n        if (isIE8) {\n            return {\n                setSizes: setSizes,\n                destroy: destroy,\n            }\n        }\n\n        return {\n            setSizes: setSizes,\n            getSizes: getSizes,\n            collapse: function collapse (i) {\n                adjustToMin(elements[i]);\n            },\n            destroy: destroy,\n            parent: parent,\n            pairs: pairs,\n        }\n    };\n\n    return Split;\n\n})));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/split.js/split.js\n");

/***/ }),

/***/ "./resources/js/index.js":
/*!*******************************!*\
  !*** ./resources/js/index.js ***!
  \*******************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var split_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! split.js */ \"./node_modules/split.js/split.js\");\n/* harmony import */ var split_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(split_js__WEBPACK_IMPORTED_MODULE_0__);\n\n\nsplit_js__WEBPACK_IMPORTED_MODULE_0___default()(['#box-left', '#box-mid', '#box-right'], {\n  sizes: [33.3, 33.4, 33.3],\n  minSize: 200,\n  gutterSize: 5\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvaW5kZXguanM/OWE1NyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU3BsaXQgZnJvbSAnc3BsaXQuanMnO1xuXG5TcGxpdChbJyNib3gtbGVmdCcsICcjYm94LW1pZCcsICcjYm94LXJpZ2h0J10sIHtcbiAgc2l6ZXM6IFszMy4zLCAzMy40LCAzMy4zXSxcbiAgbWluU2l6ZTogMjAwLFxuICBndXR0ZXJTaXplOiA1XG59KTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/index.js\n");

/***/ })

/******/ });